// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mine_stat
double mine_stat(NumericVector x, NumericVector y, double alpha, double C, String est, String measure, double eps, double p, bool norm);
RcppExport SEXP _minerva_mine_stat(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP CSEXP, SEXP estSEXP, SEXP measureSEXP, SEXP epsSEXP, SEXP pSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< String >::type est(estSEXP);
    Rcpp::traits::input_parameter< String >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(mine_stat(x, y, alpha, C, est, measure, eps, p, norm));
    return rcpp_result_gen;
END_RCPP
}
// pstats
NumericMatrix pstats(NumericMatrix x, double alpha, double C, String est);
RcppExport SEXP _minerva_pstats(SEXP xSEXP, SEXP alphaSEXP, SEXP CSEXP, SEXP estSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< String >::type est(estSEXP);
    rcpp_result_gen = Rcpp::wrap(pstats(x, alpha, C, est));
    return rcpp_result_gen;
END_RCPP
}
// cstats
NumericMatrix cstats(NumericMatrix x, NumericMatrix y, double alpha, double C, String est);
RcppExport SEXP _minerva_cstats(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP CSEXP, SEXP estSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< String >::type est(estSEXP);
    rcpp_result_gen = Rcpp::wrap(cstats(x, y, alpha, C, est));
    return rcpp_result_gen;
END_RCPP
}
// mictools_null
NumericVector mictools_null(NumericMatrix x, double alpha, double C, int nperm, int seed);
RcppExport SEXP _minerva_mictools_null(SEXP xSEXP, SEXP alphaSEXP, SEXP CSEXP, SEXP npermSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(mictools_null(x, alpha, C, nperm, seed));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP mineRall(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP mineRonevar(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_minerva_mine_stat", (DL_FUNC) &_minerva_mine_stat, 9},
    {"_minerva_pstats", (DL_FUNC) &_minerva_pstats, 4},
    {"_minerva_cstats", (DL_FUNC) &_minerva_cstats, 5},
    {"_minerva_mictools_null", (DL_FUNC) &_minerva_mictools_null, 5},
    {"mineRall",    (DL_FUNC) &mineRall,    8},
    {"mineRonevar", (DL_FUNC) &mineRonevar, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_minerva(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
